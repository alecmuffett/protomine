
rich data structures returned from searches/queries, for tags must
include "ImplicitWeight" and "explicitweight" for instance - meta
information on how many opbjects are referenced by the tag at hand,
via both methods.





CAN YOU GET AWAY FROM USING EXPLICIT OIDS BY MEANS OF USING A HASH OF
A FULL PATHNAME AS THE OID?  ISSUE IS THE REVERSE LOOKUP.  IS THERE A
PROBLEM SHARING THE FULLPATHNAME UNDER A MINEKEY?  YES.  ENCODING AND
ESCAPING.  HMMM.  SUGGEST THE MINEKEY IN PYMINE BE a SERIALISED
DICTIONARY UNDER JSON ENCODING?  WOULD THIS MAKE THE MINE MORE
INTUITIVE AND REDUCE THE LEARNING CURVE BY ESSENTIALLY SHIMMING ATOP
APACHE/THE WEBSERVER?

ALSO:CONTACT SIMONW ABOUT THE LIGHTWEIGHT CACHING WEBSERVER

INVESTIGATE MEMCACHE IN PYTHON.


re-encode status as 1 2 3 (GT0) - and provide names like 

	private
	semiprivate
	protected (= semiprivate with required auth)
	public



OPTION: mark a relationship with a boolean which determines whether
comments/feedback are "exposed" to any reader, which would make a
"public relationship" into a blog-equivalent.

fast object-sharing dialogue (share object 42 with rid ...)

fast "list what objects can be seen by RID 69" dialogue

WHEN YOU EVENTUALLY REWRITE THIS IN PYTHON, JUST PUT ALL THE CONTEXT
INFORMATION INTO A HASH AND SLING THAT AROUND RATHER THAN HAVE COMPLEX
ARGUMENTS TO THE API AND UI FUNCTIONS...

make sure /pub and other directories are hung off home page.

round out the UI pages, for comments, etc.

splash page lists ten most recent accesses?

control panel on splash page, more typical wireframes for relation management

fuller auditing on a named-user basis for all retreivals

add $depth to minekey and generator, must be >1 to be accessible

rewrite minekey using r/w not read/post; shorter keys

add crypto algorithm

random nonce in feed minekeys? 

need invariant GUID for ATOM; create GUID generator

bust /get handler out to pm-get.pl


------------------------------------------------------------------

matchInterestBlob has to become aware of tags being deleted, since it
uses the raw get() to the implicit tags

------------------------------------------------------------------

add allImplications() to Tag, doing a full tag expansion of implications

------------------------------------------------------------------

add access control for documents which are not public or final or draft

------------------------------------------------------------------

add public/final/draft access control into matchInterests

------------------------------------------------------------------

rewrite and test the ACTUAL (rather than fake) PUT handler

------------------------------------------------------------------

overhaul Crypto object to do the real thing

------------------------------------------------------------------

add relation->currentlyValid() and use in do_remote_get and do_remote_post

------------------------------------------------------------------

add IP address of client machine into Context object

------------------------------------------------------------------

add accessor methods for all pertinent data, into Context object

------------------------------------------------------------------

purge auxGet/PutBlob and other unused code

------------------------------------------------------------------

toAtom - needs GUID generation; hook this into Crypto object, 
or maybe as getGUID method on each Object?

------------------------------------------------------------------

add caching to Thing->load ($self->{CACHE$ID}?) with appropriate purging

------------------------------------------------------------------

create a perl output type for debugging?  :-)

