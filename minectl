#!/usr/bin/perl

##
## Copyright 2008 Adriana Lukas & Alec Muffett
##
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License. You
## may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
## implied. See the License for the specific language governing
## permissions and limitations under the License.
##

# standard config for this system
$execdir = $0;
$execdir =~ s![^/]+$!!g;
require "$execdir/protomine-config.pl";

# to silence perl -wc
if (0) {                        
    print $d;
    print $j;
    print $a;
    print $MINE_HTTP_FULLPATH;
}

# use imported values
$root = $MINE_HTTP_FULLPATH;

# load the MIME lookup library
require "pm-mime.pl";

# to silence perl -wc

if (0) {                        
    print $d;
    print $j;
    print $a;
    print $MINE_HTTP_FULLPATH;
}

##################################################################

# basic argument parsing

my $json = 0;
my $text = 0;
my $debug = 0;
my $auth = 0;
my $help = 0;

while ($ARGV[0] =~ m!^-(\w+)!o) {
    my $switches = $1;
    $debug = 1 if ($switches =~ m!d!o);
    $json = 1 if ($switches =~ m!j!o);
    $text = 1 if ($switches =~ m!T!o);
    $auth = 1 if ($switches =~ m!a!o);
    shift;
}

if ($debug) {
    push(@curlopts, '--verbose'); # make curl act verbosely
}
else {
    push(@curlopts, '--fail'); # make curl die silently on failure
}

if ($auth) {
    push(@curlopts, '--user', 'alecm:sesame'); # curl user and pw for authentication
    push(@curlopts, '--digest'); # curl http digest authentication
}

##################################################################

# are we requesting help?

if ($ARGV[0] eq 'help') {
    $help = 1;
    shift;
}

##################################################################

my $usercmd = shift;
my @cmdlist = ();
my $we_did_something = 0;

##################################################################

if ($help) {
    print "help: all commands matching /$usercmd/\n";
}

while (<DATA>) {
    next if (/^\s*(\#.*)?$/o);  # skip comment lines and blanks
    s/\#.*$//go;                # strip comments
    s/\s+/ /go;                 # strip multi-whitespace
    s/\s$//o;;                  # strip trailing whitespace

    # split on spaces
    my ($cmd, $call_how, $method, $api, $doc) = split(" ", $_, 5);

    # for use in the help string, below; self-documenting code my arse
    push(@cmdlist, "\t$cmd $doc\n");

    # help kludge
    if ($help) {
	print "\t$cmd $doc\n" if ($cmd =~ m!$usercmd!i);
	$we_did_something = 1;
	next;
    }

    # if this is not it, then skip to next
    next unless ($usercmd eq $cmd);

    # remember we tried to do something
    $we_did_something = 1;

    # PASSARGS: apply all foo=bar parameters to single API call

    if ($call_how eq 'PASSARGS') {
	&Mine($method, $api, @ARGV);
    }

    # ITERARGS: apply each foo=bar parameter to individual API calls

    elsif ($call_how eq 'ITERARGS') {
	foreach $arg (@ARGV) {
	    &Mine($method, $api, $arg);
	}
    }

    # SUB1PASS: strip the first arg and interpolate into API URL; pass
    # all subsequent foo=bar parameters to it ; ALSO IS PROBABLY
    # SAFEST CASE FOR SINGLE-ARGUMENT COMMANDLINES.

    elsif ($call_how eq 'SUB1PASS') {
	my $arg = shift;
	$api =~ s!\b([ORTC]ID|KEY)\b!$arg!g; # {object,relation,tag,comment}id,key
	&Mine($method, $api, @ARGV);
    }

    # SUB1ITER: strip the first arg and interpolate into API URL;
    # apply each subsequent foo=bar parameter to it individually

    elsif ($call_how eq 'SUB1ITER') {
	my $arg = shift;
	$api =~ s![ROT]ID!$arg!g;
	foreach $arg (@ARGV) {
	    &Mine($method, $api, $arg);
	}
    }

    # SUBEVERY: strip each arg and interpolate it into an API URL, and
    # call that without parameters

    elsif ($call_how eq 'SUBEVERY') {
	foreach $arg (@ARGV) {
	    my $api2 = $api;
	    $api2 =~ s![RIT]ID!$arg!g;
	    &Mine($method, $api2);
	}
    }

    # FRELATION: magic special case for adding relations
    elsif ($call_how eq 'FRELATION') {

	my $relationname = shift(@ARGV);
	my $relationversion = shift(@ARGV);
	my $relationdescription = shift(@ARGV);

	&Mine($method,
	      $api,
	      "relationName=$relationname",
	      "relationVersion=$relationversion",
	      "relationDescription=$relationdescription",
	      "relationInterests=@ARGV",
	    );
    }

    # FUPLOAD: magic special case for uploading files
    elsif ($call_how eq 'FUPLOAD') {
	my $tags = undef;

	if ($ARGV[0] eq '-t') {
	    shift(@ARGV);	# dump -t
	    $tags = shift(@ARGV); # stash and dump the tags
	}

	foreach my $filename (@ARGV) {
	    my $filetype = &mime_type($filename);
	    my @cmdargs = ( 
		"data=\@$filename",
		"objectName=$filename",
		"objectType=$filetype",
		"objectStatus=draft",
		"objectDescription=bulk-uploaded file, sourced from $filename"
		);

	    if (defined($tags)) {
		push(@cmdargs, "objectTags=$tags");
	    }

	    &Mine($method, $api, @cmdargs);

	}
    }

    # FTAGS: magic special case for creating tags
    elsif ($call_how eq 'FTAGS') {

	foreach my $foo (@ARGV) {
	    my ($tagname, $tagparents) = split(m!:!o, $foo);
	    my (@tagimplies) = split(m!,!o, $tagparents);
	    my @tagargs = ();

	    push(@tagargs, "tagName=$tagname");
	    push(@tagargs, "tagImplies=@tagimplies") if ($#tagimplies >= 0);
	    &Mine($method, $api, @tagargs);
	}
    }

    # MIMETYPE: useful kludge
    elsif ($call_how eq 'MIMETYPE') {

	foreach my $filename (@ARGV) {
	    my $filetype = &mime_type($filename);
	    print "$filetype\n";
	}
    }

    # THIS CAN'T HAPPEN
    else {
	die "LOL WHUT?\n";
    }
}

##################################################################

# did the user goof?

unless ($we_did_something) {
    warn "usage:\t$0 [-jT] [command] [args ... ]\n";
    warn "options:\n";
    warn "\t-j # select JSON output rather than XML\n";
    warn "\t-T # select text output rather than XML\n";
    warn "commands:\n";
    warn join ('',  sort @cmdlist);
    exit 1;
}

##################################################################

# done

exit 0;

##################################################################
##################################################################
##################################################################

# that which calls curl
sub Mine {
    my ($method, $api, @args) = @_;
    my $query;
    my @curlargs;

    if ($method eq 'create') {
	$query = "";
    }
    elsif ($method eq 'read') {
	$query = "";
    }
    elsif ($method eq 'update') {
	$query = "?_method=UPDATE";
    }
    elsif ($method eq 'delete') {
	$query = "?_method=DELETE";
    }
    else {
	die "$0: unrecognised method $method\n";
    }

    foreach $arg (@args) {
	push(@curlargs, '-F', $arg);
    }

    if ($json) {
	# only swap to .json if was .xml beforehand
	unless ($api =~ s!\.xml$!.json!o) { 
	    die "$0: API $api cannot be coersced to JSON format output\n";
	}
    }

    if ($text) {
	# only swap to .text if was .xml beforehand
	unless ($api =~ s!\.xml$!.txt!o) { 
	    die "$0: API $api cannot be coersced to TEXT format output\n";
	}
    }

    @cmd = ("curl", @curlopts, "$root$api$query", @curlargs);

    warn "+ exec: @cmd\n" if ($debug);
    system(@cmd);
}

##################################################################
##################################################################
##################################################################
__END__;

# useful hacks
mime-type MIMETYPE - - filename.ext ...

# accelerated upload
upload FUPLOAD create /api/object.xml [ -t "tag ..." ] file ...

# accelerated tagging
new-tags FTAGS create /api/tag.xml tag1 tag2 tag3:implies1 tag4:implies1,implies2[,more...] ...

# accelerated relation
new-relation FRELATION create /api/relation.xml name vers desc tag ...

###
# raw API calls
###

# developer testing
test PASSARGS read /test param=value ...

# calling the feed and object retreival
get SUB1PASS read /get?key=KEY minekey

# the version command, effectively a no-op / test routine
version PASSARGS read /api/version.xml

read-config PASSARGS read /api/config.xml
update-config PASSARGS update /api/config.xml param=value ...

list-objects PASSARGS read /api/object.xml
create-object PASSARGS create /api/object.xml data=@filename.txt param=value ...

read-data SUB1PASS read /api/object/OID 42
update-data SUB1PASS update /api/object/OID 42 data=@filename.txt param=value ...

delete-object SUBEVERY delete /api/object/OID.xml 42 17 23 ...
read-object SUB1PASS read /api/object/OID.xml 42
update-object SUB1PASS update /api/object/OID.xml 42 param=value ...

clone-object SUB1PASS create /api/object/OID/clone.xml 42
list-clones SUB1PASS read /api/object/OID/clone.xml 42

create-object-param SUB1PASS create /api/object/OID/param.xml 42 param=value ...
delete-object-param SUB1PASS delete /api/object/OID/param.xml 42 param=value ...
read-object-param SUB1PASS read /api/object/OID/param.xml 42 param=value ...
update-object-param SUB1PASS update /api/object/OID/param.xml 42 param=value ...

list-relations PASSARGS read /api/relation.xml
create-relation PASSARGS create /api/relation.xml param=value ...

delete-relation SUBEVERY delete /api/relation/RID.xml 42 17 23 ...
read-relation SUB1PASS read /api/relation/RID.xml 42
update-relation SUB1PASS update /api/relation/RID.xml 42 param=value ...

create-relation-param SUB1PASS create /api/relation/RID/param.xml 42 param=value ...
delete-relation-param SUB1PASS delete /api/relation/RID/param.xml 42 param=value ...
read-relation-param SUB1PASS read /api/relation/RID/param.xml 42 param=value ...
update-relation-param SUB1PASS update /api/relation/RID/param.xml 42 param=value ...

list-tags PASSARGS read /api/tag.xml
create-tag PASSARGS create /api/tag.xml param=value ...

delete-tag SUBEVERY delete /api/tag/TID.xml 42 17 23 ...
read-tag SUB1PASS read /api/tag/TID.xml 42
update-tag SUB1PASS update /api/tag/TID.xml 42 param=value ...

create-tag-param SUB1PASS create /api/tag/TID/param.xml 42 param=value ...
delete-tag-param SUB1PASS delete /api/tag/TID/param.xml 42 param=value ...
read-tag-param SUB1PASS read /api/tag/TID/param.xml 42 param=value ...
update-tag-param SUB1PASS update /api/tag/TID/param.xml 42 param=value ...

# unfinished crap
#read-share PASSARGS read /api/share/raw/RID/RVSN/OID.xml
#read-share PASSARGS read /api/share/redirect/RID.xml
#read-share PASSARGS read /api/share/redirect/RID/OID.xml
#read-share PASSARGS read /api/share/url/RID.xml
#read-share PASSARGS read /api/share/url/RID/OID.xml
#select-objects PASSARGS read /api/select/object.xml
#select-relations PASSARGS read /api/select/relation.xml
#select-tags PASSARGS read /api/select/tag.xml

